import * as googleTranslateApi from '@vitalets/google-translate-api'
import {Context} from 'grammy'
import {weather} from '../services/weather'
import {convertToFahrenheit} from '../utils/celsius-to-fahrenheit'
import {getWeather} from '../utils/weatherScrapper'

jest.mock('@vitalets/google-translate-api', () => ({
	translate: jest.fn(),
}))

jest.mock('../utils/weatherScrapper', () => ({
	getWeather: jest.fn(),
}))

jest.mock('../utils/celsius-to-fahrenheit', () => ({
	convertToFahrenheit: jest.fn(),
}))

describe('weather', () => {
	let ctx: Partial<Context>

	beforeEach(() => {
		ctx = {
			reply: jest.fn(),
		}
	})

	afterEach(() => {
		jest.clearAllMocks()
	})

	it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω', async () => {
		await weather({ctx: ctx as Context, city: '', isFahrenheit: false})

		expect(ctx.reply).toHaveBeenCalledWith(
			'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /select.',
		)
	})

	it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è', async () => {
		const mockCity = '–ú–æ—Å–∫–≤–∞'
		const mockCityInEnglish = 'moscow'
		const mockWeatherData = {
			temperature: '15¬∞',
			condition: '–û–±–ª–∞—á–Ω–æ',
		}

		;(googleTranslateApi.translate as jest.Mock).mockResolvedValueOnce({
			text: mockCityInEnglish,
		})
		;(getWeather as jest.Mock).mockResolvedValueOnce(mockWeatherData)

		const expectedMessage = `üåÜ –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ *${mockCity}*:\n\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *15¬∞C*\nüå• –°–æ—Å—Ç–æ—è–Ω–∏–µ: *–û–±–ª–∞—á–Ω–æ*\nüìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString()}\n\nüåê –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: https://pogoda.mail.ru/prognoz/${mockCityInEnglish}`

		await weather({ctx: ctx as Context, city: mockCity, isFahrenheit: false})

		expect(ctx.reply).toHaveBeenCalledWith(expectedMessage)
	})

	it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞', async () => {
		const mockCity = '–ú–æ—Å–∫–≤–∞'
		const mockCityInEnglish = 'moscow'
		const mockWeatherData = {
			temperature: '15¬∞',
			condition: '–û–±–ª–∞—á–Ω–æ',
		}

		;(googleTranslateApi.translate as jest.Mock).mockResolvedValueOnce({
			text: mockCityInEnglish,
		})
		;(getWeather as jest.Mock).mockResolvedValueOnce(mockWeatherData)
		;(convertToFahrenheit as jest.Mock).mockReturnValueOnce(59)

		const expectedMessage = `üåÜ –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ *${mockCity}*:\n\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *59.0¬∞F*\nüå• –°–æ—Å—Ç–æ—è–Ω–∏–µ: *–û–±–ª–∞—á–Ω–æ*\nüìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString()}\n\nüåê –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: https://pogoda.mail.ru/prognoz/${mockCityInEnglish}`

		await weather({ctx: ctx as Context, city: mockCity, isFahrenheit: true})

		expect(ctx.reply).toHaveBeenCalledWith(expectedMessage)
		expect(convertToFahrenheit).toHaveBeenCalledWith(15)
	})

	it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã', async () => {
		const mockCity = '–ú–æ—Å–∫–≤–∞'
		const mockErrorMessage = 'Error during translation or weather fetching'

		;(googleTranslateApi.translate as jest.Mock).mockRejectedValueOnce(
			new Error(mockErrorMessage),
		)

		await weather({ctx: ctx as Context, city: mockCity, isFahrenheit: false})

		expect(ctx.reply).toHaveBeenCalledWith(
			'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.',
		)
	})

	it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–µ–ø–æ–ª–Ω—ã–µ', async () => {
		const mockCity = '–ú–æ—Å–∫–≤–∞'
		const mockCityInEnglish = 'moscow'
		const incompleteWeatherData = {
			temperature: null,
			condition: null,
		}

		;(googleTranslateApi.translate as jest.Mock).mockResolvedValueOnce({
			text: mockCityInEnglish,
		})
		;(getWeather as jest.Mock).mockResolvedValueOnce(incompleteWeatherData)

		await weather({ctx: ctx as Context, city: mockCity, isFahrenheit: false})

		expect(ctx.reply).toHaveBeenCalledWith(
			`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${mockCity}.`,
		)
	})
})
